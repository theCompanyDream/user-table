package main

import (
	"fmt"
	"os"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/labstack/gommon/log"
	echoSwagger "github.com/swaggo/echo-swagger"
	_ "github.com/theCompanyDream/id-trials/apps/backend/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/ziflex/lecho"
	"golang.org/x/time/rate"

	"github.com/theCompanyDream/id-trials/apps/backend/controller"
	"github.com/theCompanyDream/id-trials/apps/backend/repository"
)

func main() {
	repository.InitDB()
	server := echo.New()
	logger := lecho.New(
		os.Stdout,
		lecho.WithLevel(log.DEBUG),
		lecho.WithTimestamp(),
		lecho.WithCaller(),
	)

	server.HTTPErrorHandler = controller.HttpErrorHandler

	// Middleware
	server.Use(middleware.Recover())
	server.Logger = logger
	server.Use(middleware.RequestID())
	server.Use(middleware.Gzip())
	server.Use(middleware.RateLimiter(middleware.NewRateLimiterMemoryStore(rate.Limit(10))))
	// Define main routes
	server.GET("/swagger/*", echoSwagger.WrapHandler)
	server.GET("/", controller.Home)
	server.GET("/users", controller.GetUsers)
	server.GET("/user/:id", controller.GetUser)
	server.POST("/user", controller.CreateUser)
	server.PUT("/user/:id", controller.UpdateUser)
	server.DELETE("/user/:id", controller.DeleteUser)

	// Start the server
	server.Logger.Info("Server is running...")
	port := os.Getenv("BACKEND_PORT")
	if port != "" {
		serverStartCode := fmt.Sprintf(":%s", port)
		server.Logger.Fatal(server.Start(serverStartCode))
	} else {
		server.Logger.Fatal(server.Start(":3000"))
	}
}
